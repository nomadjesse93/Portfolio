{"version":3,"sources":["views/Modal/Modal.js","views/LandingPage/Landing.js","views/Projects/ProjectCards/Card.js","views/Projects/Projects.js","views/Menu/Menu.js","views/Layout/Layout.js","views/Resume/Resume.js","App.js","serviceWorker.js","index.js","views/Menu/Menu.module.css","views/Resume/Resume.module.css","views/LandingPage/Landing.module.css","views/Modal/Modal.module.css","views/Projects/Projects.module.css","views/Projects/ProjectCards/Card.module.css","views/Layout/Layout.module.css"],"names":["Example","props","Button","variant","className","styles","button","onClick","setShow","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Landing","state","showModal","setState","prevState","Jumbotron","JumboTron","id","this","Component","card","Card","style","width","Img","src","Text","projects","container","menu","Dropdown","Toggle","Menu","text","to","layout","dropdownToggle","children","resume","paragraph","App","Layout","exact","path","component","Projects","Resume","Boolean","window","location","hostname","match","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f0e1e3d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Modal, Button} from 'react-bootstrap';\r\nimport styles from './Modal.module.css';\r\n\r\nconst Example = (props) => {   \r\n  \r\n    return (\r\n      <>\r\n        <Button variant=\"primary\" className={styles.button} onClick={props.setShow}>\r\n          Contact Me\r\n        </Button>\r\n  \r\n        <Modal show={props.show} onHide={props.setShow}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Contact Info</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n              <div>\r\n                  <ul>\r\n                      <li>Phone Number: 587-372-5093</li>\r\n                      <li>Email: jesse93@protonmail.com</li>\r\n                  </ul>\r\n              </div>\r\n              \r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={props.setShow}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={props.setShow}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default Example;","import React, {Component} from 'react';\r\nimport {\r\n    Jumbotron\r\n} from 'react-bootstrap';\r\nimport styles from './Landing.module.css';\r\nimport Modal from '../Modal/Modal';\r\n\r\n\r\n\r\nexport default class Landing extends Component {\r\n\r\n    state= {\r\n        showModal: false,\r\n    }\r\n\r\n    setShow = () => {\r\n        this.setState(prevState => ({\r\n            showModal: !prevState.showModal\r\n          }));\r\n    }\r\n \r\n \r\nrender(){\r\n    return(\r\n       \r\n        <div className='container-fluid'>\r\n            <Jumbotron className={styles.JumboTron}>\r\n\r\n                    <h1 id='name' className=\"display-3\">Jesse Sanderson</h1>\r\n                    <p className=\"lead\">Web Developer, Programmer, Tech Enthusiast</p>\r\n                    <p className=\"lead\">\r\n                    <Modal setShow={this.setShow} show={this.state.showModal}/>\r\n                    </p>\r\n            </Jumbotron>\r\n        </div>\r\n)\r\n}\r\n}\r\n","import React from 'react';\r\nimport {Card, Button} from 'react-bootstrap';\r\nimport styles from './Card.module.css';\r\n\r\nconst card = () => {\r\n    return (\r\n        <Card style={{ width: '18rem' }} className={styles.card}>\r\n  <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\r\n  <Card.Body>\r\n    <Card.Title>Card Title</Card.Title>\r\n    <Card.Text>\r\n      Some quick example text to build on the card title and make up the bulk of\r\n      the card's content.\r\n    </Card.Text>\r\n    <Button variant=\"primary\">Go somewhere</Button>\r\n  </Card.Body>\r\n</Card>\r\n    )\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport styles from './Projects.module.css'; \r\nimport Card from './ProjectCards/Card'\r\nconst projects = () => {\r\n    return(\r\n        <div className={styles.container}>\r\n          <div><Card/></div>\r\n          <div><Card/></div>\r\n          <div><Card/></div>\r\n          <div><Card/></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default projects","import React from 'react';\r\nimport {Dropdown} from 'react-bootstrap'\r\nimport styles from './Menu.module.css'\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst menu = (props) => {\r\n    return (\r\n            <Dropdown>\r\n        <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic-button\">\r\n          Menu\r\n        </Dropdown.Toggle>\r\n      \r\n        <Dropdown.Menu className={styles.menu}>\r\n          <li className={styles.text}> <Link to=\"/\">Home</Link></li>\r\n          <li className={styles.text}> <Link to=\"/projects\">Projects</Link></li>\r\n          <li className={styles.text}> <Link to=\"/resume\">Resume</Link></li>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    )\r\n}\r\n\r\nexport default menu;","import React from 'react';\r\nimport Menu from '../Menu/Menu'\r\nimport styles from '../Layout/Layout.module.css'\r\n\r\nconst layout = (props) => {\r\nreturn(\r\n    <div className='container'>\r\n    <div className={styles.dropdownToggle}>\r\n       <Menu/>\r\n    </div>\r\n{props.children}\r\n</div>\r\n)\r\n}\r\n\r\nexport default layout","import React from 'react';\r\nimport styles from './Resume.module.css';\r\n\r\nconst resume = () => {\r\n    return (\r\n        <div className={styles.paragraph}>\r\n            <h1 className={styles.text}>\r\n                This is where my resume will eventually go!\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default resume;","import React from 'react';\r\nimport Landing from '../src/views/LandingPage/Landing';\r\nimport Projects from '../src/views/Projects/Projects';\r\nimport Layout from '../src/views/Layout/Layout';\r\nimport Resume from '../src/views/Resume/Resume';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n\r\n    return(\r\n        <BrowserRouter>\r\n        <Layout>\r\n        <Route exact path='/' component={Landing}/>\r\n        <Route path='/projects' component={Projects}/>\r\n        <Route path='/resume' component={Resume}/>\r\n        </Layout>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './App.css'\r\n\r\n\r\n\r\ndocument.getElementById('root').className = 'bod';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__giLYM\",\"text\":\"Menu_text__1LIWD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paragraph\":\"Resume_paragraph__1qwzF\",\"text\":\"Resume_text__1FdEJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JumboTron\":\"Landing_JumboTron__20lMV\",\"modal\":\"Landing_modal__20FQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Modal_button__3RURu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Projects_container__10XQN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2d9Fx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdownToggle\":\"Layout_dropdownToggle__2LKZh\"};"],"sourceRoot":""}